"use client"

import { Brain, Lightbulb, AlertCircle, TrendingUp, Shield } from 'lucide-react'

interface Insight {
  type: 'security' | 'optimization' | 'best-practice' | 'warning'
  title: string
  description: string
  impact: 'high' | 'medium' | 'low'
}

export function AIInsights() {
  const insights: Insight[] = [
    {
      type: 'security',
      title: 'Consider Using ReentrancyGuard',
      description: 'External calls detected without reentrancy protection. Implement OpenZeppelin ReentrancyGuard to prevent attacks.',
      impact: 'high'
    },
    {
      type: 'optimization',
      title: 'Optimize Storage Layout',
      description: 'Pack variables together to reduce gas costs. Group uint256 variables and use smaller uints where possible.',
      impact: 'medium'
    },
    {
      type: 'best-practice',
      title: 'Add NatSpec Documentation',
      description: 'Functions lack proper documentation. Add @notice, @param, and @return tags for better code clarity.',
      impact: 'low'
    },
    {
      type: 'warning',
      title: 'Unchecked Return Values',
      description: 'Some external calls don\'t check return values. Always verify success of external contract interactions.',
      impact: 'high'
    }
  ]

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'security':
        return <Shield className="text-red-400" size={16} />
      case 'optimization':
        return <TrendingUp className="text-green-400" size={16} />
      case 'best-practice':
        return <Lightbulb className="text-yellow-400" size={16} />
      case 'warning':
        return <AlertCircle className="text-orange-400" size={16} />
      default:
        return null
    }
  }

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'security':
        return 'border-red-500/30 bg-red-500/5'
      case 'optimization':
        return 'border-green-500/30 bg-green-500/5'
      case 'best-practice':
        return 'border-yellow-500/30 bg-yellow-500/5'
      case 'warning':
        return 'border-orange-500/30 bg-orange-500/5'
      default:
        return 'border-gray-500/30 bg-gray-500/5'
    }
  }

  const getImpactBadge = (impact: string) => {
    const colors = {
      high: 'bg-red-500/10 text-red-400 border-red-500/30',
      medium: 'bg-yellow-500/10 text-yellow-400 border-yellow-500/30',
      low: 'bg-blue-500/10 text-blue-400 border-blue-500/30'
    }
    return colors[impact as keyof typeof colors] || colors.low
  }

  return (
    <div className="card p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center gap-3">
        <div className="p-2 bg-purple-500/10 rounded">
          <Brain className="text-purple-400" size={24} />
        </div>
        <div>
          <h3 className="text-lg font-bold text-white">AI Security Insights</h3>
          <p className="text-sm text-gray-400">Powered by machine learning analysis</p>
        </div>
      </div>

      {/* Insights List */}
      <div className="space-y-3">
        {insights.map((insight, index) => (
          <div
            key={index}
            className={`border rounded p-4 ${getTypeColor(insight.type)} hover:border-purple-500/30 transition-all`}
          >
            <div className="space-y-2">
              <div className="flex items-start justify-between gap-3">
                <div className="flex items-center gap-2 flex-1">
                  {getTypeIcon(insight.type)}
                  <h4 className="text-sm font-semibold text-white">{insight.title}</h4>
                </div>
                <span className={`px-2 py-0.5 rounded text-xs font-semibold border ${getImpactBadge(insight.impact)}`}>
                  {insight.impact.toUpperCase()}
                </span>
              </div>
              <p className="text-xs text-gray-400 leading-relaxed pl-6">
                {insight.description}
              </p>
            </div>
          </div>
        ))}
      </div>

      {/* Summary */}
      <div className="border-t border-gray-800 pt-4 text-xs text-gray-500 text-center">
        Insights generated by BuildProof AI Engine â€¢ {insights.length} recommendations found
      </div>
    </div>
  )
}
